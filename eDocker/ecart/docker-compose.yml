version: '3.8'
services:

  traefik:
    image: traefik:v2.1
    container_name: traefik
    networks:
      - backend
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./traefik/traefik.toml:/etc/traefik/traefik.toml:ro
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashboard.rule=PathPrefix(`/api`) || PathPrefix(`/dashboard`)"
      - "traefik.http.routers.dashboard.service=api@internal"
      - "traefik.http.routers.dashboard.middlewares=dashboard-auth"
      - "traefik.http.middlewares.dashboard-auth.basicauth.users=admin:$$apr1$$EdX8M5yY$$eempZrMtHiqAm56VpcXAP0"

  rabbitmq:
    image: rabbitmq:3.12.0-management
    container_name: rabbitmq
    ports:
      - 15672:15672
    networks:
      - backend
    volumes:
      - ecart-rabbit:/var/lib/rabbitmq/
      - ecart-rabbit:/var/log/rabbitmq

  mailhog:
    image: mailhog/mailhog
    container_name: mailhog
    networks:
      - backend
    ports:
      - "8025:8025"

  redis:
    container_name: redis
    image: redis:latest
    restart: always
    entrypoint: redis-server --appendonly yes --requirepass supersafepass! --maxmemory 512mb --maxmemory-policy allkeys-lru
    networks:
      - backend
    volumes:
      - ecart-redis:/data

  notification-service:
    image: ${REGISTRY_HOST}/${REGISTRY_REPO}/ecart-notification-service:local-georgi
    container_name: notification-service
    restart: always
    depends_on:
      - rabbitmq
    networks:
      - backend
    environment:
      - SPRING_MAIL_HOST=mailhog
      - SPRING_MAIL_PORT=1025
      - SPRING_RABBITMQ_HOST=rabbitmq

  order-service-posgresql:
    image: postgres:14.1
    container_name: order-service-posgresql
    restart: always
    networks:
      - backend
    volumes:
      - ecart-os:/data/lib
    environment:
      - POSTGRES_DB=${OS_DATABASE_NAME}
      - POSTGRES_USER=${OS_DATABASE_USER}
      - POSTGRES_PASSWORD=${OS_DATABASE_PASS}
      - POSTGRES_HOST_AUTH_METHOD=trust

  order-service:
    image: ${REGISTRY_HOST}/${REGISTRY_REPO}/ecart-order-service:local-georgi
    container_name: order-service
    restart: always
    depends_on:
      - redis
      - rabbitmq
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=${OS_DATABASE_URL}
      - SPRING_DATASOURCE_USERNAME=${OS_DATABASE_USER}
      - SPRING_DATASOURCE_PASSWORD=${OS_DATABASE_PASS}
      - SPRING_REDIS_HOST=redis
      - SPRING_RABBITMQ_HOST=rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.os.rule=PathPrefix(`/os`)"
      - "traefik.http.routers.os.middlewares=os-stripprefix"
      - "traefik.http.middlewares.os-stripprefix.stripprefix.prefixes=/os"
      - "traefik.http.services.os.loadbalancer.server.port=8081"

  product-service-posgresql:
    image: postgres:14.1
    container_name: product-service-posgresql
    restart: always
    networks:
      - backend
    volumes:
      - ecart-ps:/data/lib
    environment:
      - POSTGRES_DB=${PS_DATABASE_NAME}
      - POSTGRES_USER=${PS_DATABASE_USER}
      - POSTGRES_PASSWORD=${PS_DATABASE_PASS}
      - POSTGRES_HOST_AUTH_METHOD=trust

  product-service:
    image: ${REGISTRY_HOST}/${REGISTRY_REPO}/ecart-product-service:local-georgi
    container_name: product-service
    restart: always
    depends_on:
      - redis
      - rabbitmq
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=${PS_DATABASE_URL}
      - SPRING_DATASOURCE_USERNAME=${PS_DATABASE_USER}
      - SPRING_DATASOURCE_PASSWORD=${PS_DATABASE_PASS}
      - SPRING_RABBITMQ_HOST=rabbitmq
      - SPRING_REDIS_HOST=redis
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.ps.rule=PathPrefix(`/ps`)"
      - "traefik.http.routers.ps.middlewares=ps-stripprefix"
      - "traefik.http.middlewares.ps-stripprefix.stripprefix.prefixes=/ps"
      - "traefik.http.services.ps.loadbalancer.server.port=8082"

  review-rating-service-posgresql:
    image: postgres:14.1
    container_name: review-rating-service-posgresql
    restart: always
    networks:
      - backend
    volumes:
      - ecart-rrs:/data/lib
    environment:
      - POSTGRES_DB=${RRS_DATABASE_NAME}
      - POSTGRES_USER=${RRS_DATABASE_USER}
      - POSTGRES_PASSWORD=${RRS_DATABASE_PASS}
      - POSTGRES_HOST_AUTH_METHOD=trust

  review-rating-service:
    image: ${REGISTRY_HOST}/${REGISTRY_REPO}/ecart-rev-rate-service:local-georgi
    container_name: review-rating-service
    restart: always
    depends_on:
      - redis
      - rabbitmq
    networks:
      - backend
    environment:
      - SPRING_DATASOURCE_URL=${RRS_DATABASE_URL}
      - SPRING_DATASOURCE_USERNAME=${RRS_DATABASE_USER}
      - SPRING_DATASOURCE_PASSWORD=${RRS_DATABASE_PASS}
      - SPRING_REDIS_HOST=redis
      - SPRING_RABBITMQ_HOST=rabbitmq
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rrs.rule=PathPrefix(`/rrs`)"
      - "traefik.http.routers.rrs.middlewares=rrs-stripprefix"
      - "traefik.http.middlewares.rrs-stripprefix.stripprefix.prefixes=/rrs"
      - "traefik.http.services.rrs.loadbalancer.server.port=8084"

  frontend:
    container_name: frontend
    build:
      context: ../../frontend-client
      dockerfile: Dockerfile
    restart: always
    networks:
      - backend
    volumes:
      - ecart-frontend:/app
    ports:
      - "3000:3000"
    environment:
      - VITE_ORDER_SERVICE_HOST=${SERVICE_HOST}
      - VITE_PRODUCT_SERVICE_HOST=${SERVICE_HOST}
      - VITE_REV_RATE_SERVICE_HOST=${SERVICE_HOST}
      - VITE_ORDER_SERVICE_PREFIX=${ORDER_SERVICE_PREFIX}
      - VITE_PRODUCT_SERVICE_PREFIX=${PRODUCT_SERVICE_PREFIX}
      - VITE_REV_RATE_SERVICE_PREFIX=${REV_RATE_SERVICE_PREFIX}
    labels:
      - "traefik.enable=true"
#      - "traefik.http.routers.frontend.rule=Host(`frontend.localhost`)"
#      - "traefik.http.services.frontend.loadbalancer.server.port=3000"

networks:
  backend:

volumes:
  ecart-os:
  ecart-ps:
  ecart-rrs:
  ecart-rabbit:
  ecart-redis:
  ecart-frontend: